/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ComponentService } from "../component.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ComponentCreateInput } from "./ComponentCreateInput";
import { Component } from "./Component";
import { ComponentFindManyArgs } from "./ComponentFindManyArgs";
import { ComponentWhereUniqueInput } from "./ComponentWhereUniqueInput";
import { ComponentUpdateInput } from "./ComponentUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ComponentControllerBase {
  constructor(
    protected readonly service: ComponentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Component })
  @nestAccessControl.UseRoles({
    resource: "Component",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createComponent(
    @common.Body() data: ComponentCreateInput
  ): Promise<Component> {
    return await this.service.createComponent({
      data: {
        ...data,

        page: data.page
          ? {
              connect: data.page,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        page: {
          select: {
            id: true,
          },
        },

        settings: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Component] })
  @ApiNestedQuery(ComponentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Component",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async components(@common.Req() request: Request): Promise<Component[]> {
    const args = plainToClass(ComponentFindManyArgs, request.query);
    return this.service.components({
      ...args,
      select: {
        createdAt: true,
        id: true,

        page: {
          select: {
            id: true,
          },
        },

        settings: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Component })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Component",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async component(
    @common.Param() params: ComponentWhereUniqueInput
  ): Promise<Component | null> {
    const result = await this.service.component({
      where: params,
      select: {
        createdAt: true,
        id: true,

        page: {
          select: {
            id: true,
          },
        },

        settings: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Component })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Component",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateComponent(
    @common.Param() params: ComponentWhereUniqueInput,
    @common.Body() data: ComponentUpdateInput
  ): Promise<Component | null> {
    try {
      return await this.service.updateComponent({
        where: params,
        data: {
          ...data,

          page: data.page
            ? {
                connect: data.page,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          page: {
            select: {
              id: true,
            },
          },

          settings: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Component })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Component",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteComponent(
    @common.Param() params: ComponentWhereUniqueInput
  ): Promise<Component | null> {
    try {
      return await this.service.deleteComponent({
        where: params,
        select: {
          createdAt: true,
          id: true,

          page: {
            select: {
              id: true,
            },
          },

          settings: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/ai-helper")
  @swagger.ApiOkResponse({
    type: Component,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetAiHelper(
    @common.Body()
    body: ComponentFindManyArgs
  ): Promise<Component> {
    return this.service.GetAiHelper(body);
  }
}
